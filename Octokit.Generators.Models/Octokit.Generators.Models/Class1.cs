using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using Newtonsoft.Json;
using System.Diagnostics;
using System.Globalization;
using System.Net;
using System.Text;

namespace Octokit.Generators.Models
{
    [Generator]
    public class ModelSourceGenerator : ISourceGenerator
    {
        public void Execute(GeneratorExecutionContext context)
        {
            //Debugger.Launch();
            WebClient downloadClient = new();
            var jsonFile = downloadClient.DownloadString("https://raw.githubusercontent.com/github/rest-api-description/main/descriptions/api.github.com/api.github.com.json");

            var deserializedObject = JsonConvert.DeserializeObject<GitHubOpenApiSpec>(jsonFile);

            if (deserializedObject.Tags.Count() < 1)
            {
                throw new Exception("No tags");
            }

            foreach (var item in deserializedObject.Tags)
            {
                context.AddSource($"{item.SafeName}.cs", $@"// <auto-generated/>
using System;

namespace Octokit.Generators.Models
{{
    public class {item.SafeName}
    {{
    }}
}}
");
            }

            foreach (var path in deserializedObject.Paths)
            {
                foreach (var method in path.Value)
                {
                    var parameterData = GetParameters(method.Value.Parameters);
                    var methodParameters = string.Join(", ", parameterData.Select(x => x.MethodParameter));
                    string clientData = $@"// <auto-generated/>
using System;
using System.Net.Http;

namespace Octokit.Generators.Clients
{{
    public partial class {method.Value.SafeOperationId}Client
    {{
        public const string Route = ""{path.Key}"";
        public HttpMethod Method = HttpMethod.{CultureInfo.CurrentCulture.TextInfo.ToTitleCase(method.Key)};

        /// <summary>
        /// {method.Value.Summary}
        /// </summary>
        /// <remarks>
        /// See the <a href=""{method.Value.ExternalDocs.Url}"">API documentation</a> for more information.
        /// </remarks>
        public async Task ExecuteRequest({methodParameters})
        {{
        }}
    }}
}}
";
                    context.AddSource($"{method.Value.SafeOperationId}Client.cs", clientData);
                }
            }
        }

        public void Initialize(GeneratorInitializationContext context)
        {
        }

        private List<ParameterListItem> GetParameters(GitHubOpenApiSpecParameter[] parameters)
        {
            List<ParameterListItem> finalParameters = new();

            foreach (var parameter in parameters.Where(x => x != null))
            {
                if (string.IsNullOrEmpty(parameter.Ref))
                {
                    var parameterListItem = new ParameterListItem
                    {
                        In = parameter.In,
                        Type = parameter.Schema?.SafeType ?? "string",
                        Required = !parameter.Required ? "?" : "",
                        Name = $"@{parameter.Name}",
                    };

                    if (parameter.Schema?.Default != null)
                    {
                        if (parameter.Schema.Default is int intItem)
                        {
                            parameterListItem.Default = intItem.ToString();
                        }
                        else if (parameter.Schema.Default is string stringItem)
                        {
                            parameterListItem.Default = $"\"{stringItem}\"";
                        }
                    }

                    finalParameters.Add(parameterListItem);
                }
            }

            return finalParameters.OrderBy(x => string.IsNullOrEmpty(x.Default) ? 0 : 1).ToList();
        }

        private class ParameterListItem
        {
            public string In { get; set; } = string.Empty;

            public string Type { get; set; } = string.Empty;

            public string Required { get; set; } = string.Empty;

            public string Name { get; set; } = string.Empty;

            public string Default { get; set; } = string.Empty;

            public string MethodParameter => $"{Type}{Required} {Name}{(!string.IsNullOrEmpty(Default) ? " = " + Default : "")}";
        }
    }

    public class GitHubOpenApiSpec
    {
        public string OpenApi { get; set; } = string.Empty;

        public GitHubOpenApiSpecInfo Info { get; set; } = new();

        public GitHubOpenApiSpecTag[] Tags { get; set; } = Array.Empty<GitHubOpenApiSpecTag>();

        public GitHubOpenApiSpecServer[] Servers { get; set; } = Array.Empty<GitHubOpenApiSpecServer>();

        public GitHubOpenApiSpecExternalDoc ExternalDocs { get; set; } = new();

        public Dictionary<string, Dictionary<string, GitHubOpenApiSpecInfoAction>> Paths { get; set; } = new();

        public GitHubOpenApiSpecComponent Componenets { get; set; } = new();
    }

    public class GitHubOpenApiSpecInfo
    {
        public string Version { get; set; } = string.Empty;

        public string Title { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        public GitHubOpenApiSpecLicense License { get; set; } = new();

        public string TermsOfService { get; set; } = string.Empty;

        public GitHubOpenApiSpecContact Contact { get; set; } = new();
    }

    public class GitHubOpenApiSpecLicense
    {
        public string Name { get; set; } = string.Empty;

        public string Url { get; set; } = string.Empty;
    }

    public class GitHubOpenApiSpecContact
    {
        public string Name { get; set; } = string.Empty;

        public string Url { get; set; } = string.Empty;
    }

    public class GitHubOpenApiSpecTag
    {
        public string Name { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        public string SafeName => CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Name).Replace("-", "");
    }

    public class GitHubOpenApiSpecServer
    {
        public string Url { get; set; } = string.Empty;
    }

    public class GitHubOpenApiSpecExternalDoc
    {
        public string Description { get; set; } = string.Empty;

        public string Url { get; set; } = string.Empty;
    }

    public class GitHubOpenApiSpecInfoAction
    {
        public string Summary { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        public string OperationId { get; set; } = string.Empty;

        public GitHubOpenApiSpecExternalDoc ExternalDocs { get; set; } = new();

        public GitHubOpenApiSpecParameter[] Parameters { get; set; } = Array.Empty<GitHubOpenApiSpecParameter>();

        [JsonProperty("x-github")]
        public GitHubOpenApiSpecXGitHub XGitHub { get; set; } = new();

        public string SafeOperationId => CultureInfo.CurrentCulture.TextInfo.ToTitleCase(OperationId).Replace('/', '_').Replace("-", "");
    }

    public class GitHubOpenApiSpecXGitHub
    {
        public string Category { get; set; } = string.Empty;

        public string SubCategory { get; set; } = string.Empty;

        public string SafeCategory => CultureInfo.CurrentCulture.TextInfo.ToTitleCase(Category).Replace("-", string.Empty);
    }

    public class GitHubOpenApiSpecComponent
    {
        public Dictionary<string, GitHubOpenApiSpecParameter> Parameters { get; set; } = new();
    }

    public class GitHubOpenApiSpecParameter
    {
        [JsonProperty("$ref")]
        public string Ref { get; set; } = string.Empty;

        public string Name { get; set; } = string.Empty;

        public string Description { get; set; } = string.Empty;

        public string In { get; set; } = string.Empty;

        public bool Required { get; set; } = false;

        public GitHubOpenApiSpecSchema? Schema { get; set; } = new GitHubOpenApiSpecSchema { Type = "string" };
    }

    public class GitHubOpenApiSpecSchema
    {
        public string Type { get; set; } = string.Empty;

        public object Default { get; set; } = new();

        public GitHubOpenApiSpecSchemaItem Items { get; set; } = new();

        public string SafeType
        {
            get
            {
                if (Type == "integer") return "int";
                if (Type == "boolean") return "bool";
                if (Type == "array" && Items?.Type != null)
                {
                    return $"{Items?.Type}[]";
                }
                if (Type == "array")
                {
                    return "string[]";
                }

                return Type;
            }
        }
    }

    public class GitHubOpenApiSpecSchemaItem
    {
        public string Description { get; set; } = string.Empty;

        public string Type { get; set; } = string.Empty;
    }
}
